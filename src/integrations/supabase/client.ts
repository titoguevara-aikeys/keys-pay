// This file is automatically generated. Do not edit it directly.
import { createClient, type SupabaseClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://emolyyvmvvfjyxbguhyn.supabase.co";
// Fallback anon key; will be replaced at runtime if a newer key is available from the backend
const FALLBACK_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImVtb2x5eXZtdnZmanl4Ymd1aHluIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ0MDI3NDIsImV4cCI6MjA2OTk3ODc0Mn0.u9KigfxzhqIXVjfRLRIqswCR5rCO8Mrapmk8yjr0wVU";

const create = (key: string): SupabaseClient<Database> =>
  createClient<Database>(SUPABASE_URL, key, {
    auth: {
      storage: localStorage,
      persistSession: true,
      autoRefreshToken: true,
    },
  });

let client = create(FALLBACK_ANON_KEY);

// Export a proxy so we can hot-swap the underlying client once we fetch the latest anon key
export const supabase = new Proxy({} as SupabaseClient<Database>, {
  get(_target, prop, receiver) {
    // @ts-ignore - dynamic forwarding to the real client
    return Reflect.get(client, prop, receiver);
  },
});

// Try to fetch the latest anon key from an Edge Function and hot-swap the client
(async () => {
  try {
    const res = await fetch(`${SUPABASE_URL}/functions/v1/get-publishable-key`, {
      method: 'GET',
      headers: { 'Content-Type': 'application/json' },
    });
    if (res.ok) {
      const { url, anonKey } = await res.json();
      if (url === SUPABASE_URL && anonKey && typeof anonKey === 'string' && anonKey !== FALLBACK_ANON_KEY) {
        client = create(anonKey);
        // Optional: console.debug('Supabase anon key updated at runtime');
      }
    }
  } catch {
    // Silently ignore and keep using fallback
  }
})();
